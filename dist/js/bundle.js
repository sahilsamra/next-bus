const form=document.querySelector("form"),input=form.querySelector("input"),apiKey="Ehg5Nso4pNe0kGRIfPW",streetContainer=document.querySelector(".streets"),tableContainer=document.querySelector("tbody");function getStreetName(e){return fetch(`https://api.winnipegtransit.com/v3/streets.json?api-key=${apiKey}&name=${e}&usage=long`).then(e=>{if(e.ok)return e.json();throw new Error("There is a problem in street name (;T__T:)")}).then(e=>e.streets)}function buildStreetList(e){let t="";streetContainer.innerHTML="",getStreetName(e).then(e=>{0!==e.length?e.forEach(e=>{t+=`<a href="#" data-street-key="${e.key}">${e.name}</a>`}):t="No Streets found",streetContainer.insertAdjacentHTML("beforeend",t)})}function buildStreetNameHeader(e){const t=document.querySelector("#street-name");t.textContent="",t.textContent=`Displaying results for ${e}`}function buildSchedualTable(e){let n="";tableContainer.innerHTML="",getScheduleArray(e).then(e=>{for(var t of e)for(var r of t["route-schedules"])n+=` <tr>
                      <td>${t.stop.street.name}</td>
                      <td>${t.stop["cross-street"].name}</td>
                      <td>${t.stop.direction}</td>
                      <td>${r.route.number}</td>
                      <td>${timeFormatter(r["scheduled-stops"][0].times.departure.estimated)}</td>
                    </tr>`;tableContainer.insertAdjacentHTML("beforeend",n)})}function getScheduleArray(e){return gstStopNamesInStreet(e).then(e=>{const t=[];var r;for(r of e.map(e=>e.key))t.push(fetch(`https://api.winnipegtransit.com/v3/stops/${r}/schedule.json?api-key=${apiKey}&max-results-per-route=2`).then(e=>{if(e.ok)return e.json();throw new Error("There is a problem in stop names (;T__T:)")}).then(e=>e["stop-schedule"]));return Promise.all(t)})}function gstStopNamesInStreet(e){return fetch(`https://api.winnipegtransit.com/v3/stops.json?street=${e}&api-key=${apiKey}`).then(e=>{if(e.ok)return e.json();throw new Error("There is a problem in stop names (;T__T:)")}).then(e=>e.stops)}function timeFormatter(e){const t=new Date(e);return t.toLocaleTimeString("en-US",{timeZone:"Canada/Central",hour12:!0,hour:"numeric",minute:"numeric"})}form.addEventListener("keypress",function(e){13===e.keyCode&&(e.preventDefault(),buildStreetList(input.value))}),streetContainer.addEventListener("click",function(e){"A"===e.target.tagName&&(buildStreetNameHeader(e.target.textContent),buildSchedualTable(e.target.dataset.streetKey))});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
